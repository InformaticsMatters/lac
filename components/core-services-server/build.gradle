description = 'Core services'
def contextName = 'coreservices'

apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'org.unbroken-dome.test-sets'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage



dependencies {
    
    compile project(':common')
    compile project(':common-utils')
    compile project(':common-camel')
    compile project(':chemaxon-lib')
    compile project(':core-services-common')
    compile project(':core-services-exec')
    compile project(':core-services-client')
    
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile "org.apache.camel:camel-core:$camelVersion"
    compile "org.apache.camel:camel-jackson:$camelVersion"
    compile "org.apache.camel:camel-servletlistener:$camelVersion"
    compile "org.apache.camel:camel-servlet:$camelVersion"
    compile "org.apache.camel:camel-swagger:$camelVersion"
    compile "org.apache.camel:camel-http4:$camelVersion"
    compile "org.apache.camel:camel-rabbitmq:$camelVersion"
     
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    
    def tomcatVersion = '7.0.59'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
    
    compile "org.postgresql:postgresql:$postgresDriverVersion"
  
}

/* Integration test setup is borrowed from here:
 * http://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing-with-the-testsets-plugin/
 * */
testSets {
    integrationTest
}

//check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

integrationTest {
    dependsOn rootProject.tasks.integrationTestEnvPrepareAndClean, tasks.getByPath(':database:flywayMigrate')
    finalizedBy rootProject.tasks.integrationTestEnvShutdown
}

project.integrationTest {
    outputs.upToDateWhen { false }
}

tomcat {
    enableSSL = true
    contextPath = contextName
    
    users {
        user {
            username = 'admin'
            password = 'lacrocks'
            roles = ['developers', 'admin']
        }

        user {
            username = 'manager'
            password = 'lacrocks'
            roles = ['manager']
        }
    }
}

/** Build a Docker image
 * run the generated image with something like this:
 * 
 * docker run -d --name core-services -p 80:8080 --link <name_of_postgres_db_container>:db --link <name_of_rabbitmq_container>:rabbitmq
 */

docker {
    println "Using docker host of $dockerHost"
    url = dockerHost
    certPath = null
}

task buildDockerFile(type: Dockerfile, dependsOn: war) {

    destFile = project.file('build/Dockerfile')
    from "tomcat:7-jre8"
    maintainer 'Tim Dudgeon <tdudgeon@informaticsmatters.com>'

    runCommand("rm -rf /usr/local/tomcat/webapps/*")
    
    def warFile = tasks.war.outputs.files.singleFile
    addFile('libs/' + warFile.name, "/usr/local/tomcat/webapps/${contextName}.war")
    
    exposePort(8080)
}

task builDockerImage(type: DockerBuildImage, dependsOn: buildDockerFile) {
    inputDir = buildDockerFile.destFile.parentFile
    tag = "squonk/" + contextName
}
