package org.squonk.core.client

import org.squonk.data.Molecules
import org.squonk.io.DepictionParameters

import java.util.zip.GZIPInputStream

import static org.squonk.io.DepictionParameters.OutputFormat.*
import spock.lang.Specification

/**
 * Created by timbo on 02/09/16.
 */
class StructureIOClientSpec extends Specification {

    static String baseurl = "http://localhost:8092/chem-services-cdk-basic/"

    static  StructureIOClient client =  new StructureIOClient.CDK() {
        @Override
        protected String getBase() {
             return baseurl
        }
    }

    void "simple get"() {
        URL url = new URL(baseurl + "moldepict?w=200&h=200&bg=%2300ffffff&expand=1&mol=C1%3DCC%3DCC%3DC1&molFormat=smiles&format=png")

        when:
        InputStream is = url.openStream()
        byte[] b = is.getBytes()

        then:
        b.length > 0
    }

    void "cdk smiles to png"() {

        when:
        byte[] img = client.renderImage("C1=CC=CC=C1", "smiles", png, new DepictionParameters(200, 200))

        then:
        img.length > 0
    }

    void "cdk mol to png"() {

        when:
        byte[] img = client.renderImage(Molecules.ethanol.v2000, "mol", png, new DepictionParameters(200, 200))

        then:
        img.length > 0
    }


    void "cdk smiles to svg"() {

        when:
        String svg = client.renderSVG("C1=CC=CC=C1", "smiles", new DepictionParameters(20, 20))

        then:
        svg.size() > 0
        svg.contains('<!DOCTYPE svg PUBLIC')
        svg.contains('Generated by the Chemistry Development Kit')
    }

    void "cdk mol to svg"() {

        when:
        String svg = client.renderSVG(Molecules.ethanol.v2000, "mol", new DepictionParameters(20, 20))

        then:
        svg.size() > 0
        svg.contains('<!DOCTYPE svg PUBLIC')
        svg.contains('Generated by the Chemistry Development Kit')
    }

    void "cdk convert to sdf"() {

        when:
        String sdf = client.molConvert(Molecules.nci10Dataset(), "sdf", false).text
        def parts = sdf.split('END')

        then:
        parts.length == 11
    }


//    void "cdk convert to gzipped sdf"() {
//
//        when:
//        def gzip = client.molConvert(Molecules.nci10Dataset(), "sdf", true)
//        String sdf = new GZIPInputStream(gzip).text
//        def parts = sdf.split('END')
//
//        then:
//        parts.length == 11
//    }

}
