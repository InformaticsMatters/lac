apply plugin: 'groovy'


def RDBASE = System.getenv('RDBASE')

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
    }
}

apply plugin: 'org.unbroken-dome.test-sets'

dependencies {
    
    compile project(':common')
    compile project(':common-utils')

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    if (RDBASE) {
        //println "$RDBASE defined - using that location for RDkit"
        compile files("$RDBASE/Code/JavaWrappers/gmwrapper/org.RDKit.jar")
    } else {
        //println "Using local org.RDKit.jar"
        compile files("../../lib/rdkit/org.RDKit.jar")
    }

    compile "org.postgresql:postgresql:$postgresDriverVersion"

    testCompile project(':core-test')
}

/* Integration test setup is borrowed from here:
 * http://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-integration-testing-with-the-testsets-plugin/
 * */
testSets {
    integrationTest
}

//check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

project.integrationTest {
    outputs.upToDateWhen { false }
}

integrationTest {
    dependsOn rootProject.tasks.dbTestEnvPrepare,
            tasks.getByPath(':database:flywayMigrate')
    finalizedBy rootProject.tasks.dbTestEnvShutdown
}

// run the loaders with something like this:
// ./gradlew --daemon -PmainClass=org.squonk.rdkit.db.loaders.EMoleculesSmilesLoader rdkit-lib:execute
task execute(type:JavaExec) {
    if (project.hasProperty('mainClass')) {
        main = mainClass
    }
    classpath = sourceSets.main.runtimeClasspath
}