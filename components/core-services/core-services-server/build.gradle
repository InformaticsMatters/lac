description = 'Core services'
def contextName = 'coreservices'

apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'com.bmuschko.docker-remote-api'
//apply plugin: 'docker'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
        classpath 'com.bmuschko:gradle-docker-plugin:2.4.1'
        //classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}


dependencies {
    
    compile project(':common')
    compile project(':common-camel')
    compile project(':chemaxon-lib')
    compile project(':core-services/core-services-common')
    
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"

    compile "org.apache.camel:camel-core:$camelVersion"
    compile "org.apache.camel:camel-jackson:$camelVersion"
    compile "org.apache.camel:camel-servletlistener:$camelVersion"
    compile "org.apache.camel:camel-servlet:$camelVersion"
    compile "org.apache.camel:camel-swagger:$camelVersion"
    compile "org.apache.camel:camel-http4:$camelVersion"
    compile "org.apache.camel:camel-rabbitmq:$camelVersion"
     
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    
    def tomcatVersion = '7.0.59'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
    
    compile "org.postgresql:postgresql:9.4-1201-jdbc41"
  
}

tomcat {
    enableSSL = true
    contextPath = contextName
    
    users {
        user {
            username = 'admin'
            password = 'lacrocks'
            roles = ['developers', 'admin']
        }

        user {
            username = 'manager'
            password = 'lacrocks'
            roles = ['manager']
        }
    }
}

//docker {
//    baseImage "tomcat:7-jre8"
//    maintainer 'Tim Dudgeon'
//}

/** Build a Docker image
 * run the generated image with something like this:
 * 
 * docker run -d --name core-services -p 80:8080 --link <name_of_postgres_db_container>:db --link <name_of_rabbitmq_container>:rabbitmq -v <host_dir>:/external <image id>
 * 
 * Note: the host directory <host_dir> containing the ChemAxon license file needs to be specified,
 * or some other mechanism used, probably by setting the value of the CHEMAXON_LICENSE_URL
 * environment variable using an -e option.
 * The following environment variables can be used to override the default settings:
 * CHEMCENTRAL_DB_SERVER, CHEMCENTRAL_DB_PORT, CHEMCENTRAL_DB_USERNAME, CHEMCENTRAL_DB_PASSWORD, CHEMAXON_LICENSE_URL
 */

docker {
    url = 'http://' + (System.getenv('DOCKER_IP') ?: 'localhost') + ':2375'
    //certPath = new File(System.properties['user.home'], '.docker')
    certPath = null
}

task dockerFile(type: Dockerfile, dependsOn: war) {
    
    copy{
        from "../../../data/licenses/license.cxl"
        into 'build'
    }
    
    destFile = project.file('build/Dockerfile')
    from "tomcat:7-jre8"
    maintainer 'Tim Dudgeon <tdudgeon@informaticsmatters.com>'
    
    addFile('license.cxl', 'license.cxl')
    environmentVariable("CHEMCENTRAL_DB_SERVER", "db") // assumes the db alias is used when linking. If not override with a -e argument
    environmentVariable("RABBITMQ_HOST", "rabbitmq")   // assumes the rabbitmq alias is used when linking. If not override with a -e argument
    environmentVariable('CHEMCENTRAL_DB_PORT', '5432')
    environmentVariable("CHEMAXON_LICENSE_URL", "/license.cxl")
    
    runCommand("rm -rf /usr/local/tomcat/webapps/*")
    
    def warFile = tasks.war.outputs.files.singleFile
    addFile('libs/core-services/' + warFile.name, "/usr/local/tomcat/webapps/${contextName}.war")
    
    exposePort(8080)
}

task dockerImage(type: DockerBuildImage) {
    dependsOn war, dockerFile
    inputDir = dockerFile.destFile.parentFile
    tag = "timdudgeon/" + contextName
}

test {
    dependsOn rootProject.tasks.integrationTestEnvPrepareAndClean
    finalizedBy rootProject.tasks.integrationTestEnvShutdown
}

