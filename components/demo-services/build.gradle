apply plugin: 'groovy'
apply plugin: 'application'

//mainClassName = "com.im.lac.demo.routes.EmolsMultiSearchRouteBuilder"
//applicationDefaultJvmArgs = ["-Xmx16000m"]

mainClassName = "com.im.lac.demo.routes.Main"
applicationDefaultJvmArgs = ["-Xmx1200m"]

apply plugin: 'docker'


buildscript {
    repositories { 
        jcenter() 
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}


dependencies {

    compile project(':common')
    compile project(':chemaxon-camel')
    compile project(':chemaxon-lib')
    compile project(':cdk-camel')
    compile project(':cdk-lib')
    compile project(':rdkit-camel')

    compile "org.postgresql:postgresql:9.4-1201-jdbc41"
    
    compile "org.apache.camel:camel-core:$camelVersion"
    compile "org.apache.camel:camel-jetty:$camelVersion"
    compile "org.apache.camel:camel-jackson:$camelVersion"
    compile "org.apache.camel:camel-http4:$camelVersion"
    compile "org.apache.camel:camel-jms:$camelVersion"

    compile "org.apache.activemq:activemq-camel:5.6.0"
    
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'org.glassfish.jersey.core:jersey-server:2.6'

    testCompile project(':core-test')
}



docker {
    //baseImage "dockerfile/java:oracle-java8"
    baseImage "abradle/rdjython"
    maintainer 'Tim Dudgeon'
}

/** Build a Docker image
 * run the generated image with something like this:
 * docker run -d --name services -p 80:8080 --link <name_of_postgres_db_image>:db -v <host_dir>:/external <image_id>
 * 
 * Note: the host directory <host_dir> containing the ChemAxon license file needs to be specified,
// * or some other mechanism used, probably by setting the value of the CHEMAXON_LICENSE_URL
 * environment variable using an -e option.
 * The following environment variables can be used to override the default settings:
 * CHEMCENTRAL_DB_SERVER, CHEMCENTRAL_DB_PORT, CHEMCENTRAL_DB_USERNAME, CHEMCENTRAL_DB_PASSWORD, CHEMAXON_LICENSE_URL
 */
task buildDocker(type: Docker, dependsOn: distZip) {
    applicationName = "demoservices"
    runCommand("apt-get update")
    def zipFile = tasks.distZip.outputs.files.singleFile
    addFile(zipFile, '/data/' + zipFile.name)
    runCommand("unzip /data/" + zipFile.name)
    addFile {
        into "pages"
        from "src/main/html" 
    }
    setEnvironment("HTML_DOC_ROOT", "/pages")
    setEnvironment("CHEMCENTRAL_DB_SERVER", "db") // assumes the db alias is used when linking. If not override with a -e argument
    setEnvironment('CHEMCENTRAL_DB_PORT', '5432')
    setEnvironment("CHEMAXON_LICENSE_URL", "/external/license.cxl")
    
    setEnvironment('RDBASE', '/RDKit/rdkit')
    setEnvironment('LD_LIBRARY_PATH', '$RDBASE/lib:$RDBASE/Code/JavaWrappers/gmwrapper:$LD_LIBRARY_PATH')
    setEnvironment('PYTHONPATH', '$RDBASE/lib:$RDBASE:$PYTHONPATH')  
   
    // this is a bit of a hack that's needed to to put the RDKit jars onto the classpath 
    runCommand("cp \$RDBASE/Code/JavaWrappers/gmwrapper/org.RDKit.jar /data/${project.name}-${version}/lib/")
    runCommand("cp \$RDBASE/Code/JavaWrappers/gmwrapper/org.RDKitDoc.jar /data/${project.name}-${version}/lib/")
    runCommand("cp \$RDBASE/Code/JavaWrappers/gmwrapper/libGraphMolWrap.so /data/${project.name}-${version}/lib/")
    
    exposePort(8080) // do we need to configure the port?
    entryPoint(["/data/${project.name}-${version}/bin/${project.name}"])
}


test {
    dependsOn rootProject.tasks.integrationTestEnvPrepareAndClean
    finalizedBy rootProject.tasks.integrationTestEnvShutdown
}