description = 'LAC tools for life sciences'

allprojects {
    
    group = 'im.lac.components'
    
    apply plugin: 'groovy' // Apply the groovy plugin (also adds support for Java)
    apply plugin: 'idea'   // can be used to generate Idea project files using ./gradlew idea
    apply plugin: 'maven'  // Maven repo stuff

    sourceCompatibility = 1.8
    version = '0.2-SNAPSHOT'
    
    project.ext.set('camelVersion', '2.15.2')
    // look at the jackson2-version property here to get the right Jackson version
    // https://github.com/apache/camel/blob/master/parent/pom.xml
    // note: version used by camel is 2.4.3 - trying later version to use "Attributes"
    project.ext.set('jacksonVersion', '2.5.3')
    project.ext.set('cdkVersion', '1.5.10')


    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use 'jcenter' for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        
        maven {
            credentials {
                // define username and password as environment variables 
                username System.getenv('CHEMAXON_REPO_USERNAME')
                password System.getenv('CHEMAXON_REPO_PASSWORD')
            }
            url "https://repository.chemaxon.com/artifactory/libs-release"
        }
    }

    // In this section you declare the dependencies for your production and test code
    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-simple:1.7.7'
        compile "org.codehaus.groovy:groovy-all:2.3.9"
        compile files("/RDKit/rdkit/Code/JavaWrappers/gmwrapper/org.RDKitDoc.jar", "/RDKit/rdkit/Code/JavaWrappers/gmwrapper/org.RDKit.jar","/RDKit/rdkit/Code/JavaWrappers/gmwrapper/libGraphMolWrap.so")
        // Spock for unit testing
        testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    }
}

// all subprojects are assumed to have artifacts to send to maven repo
subprojects {
    uploadArchives {
        repositories {
            mavenDeployer {
                // hard coded URL as Jenkins puts things to there.
                // If you want to run this locally then make sure that directory exists. 
                repository(url: "file:///var/maven_repo/")
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
    jarFile = 'wrapper/wrapper.jar'
}
